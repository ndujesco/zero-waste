// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  password         String
  email            String    @unique
  username         String
  phoneNumber      String    @unique
  state            String
  homeAddress      String
  isVerified       Boolean   @default(false)
  otp              String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  farmerType       Farmer
  sentMessages     Message[] @relation("sent")
  receivedMessages Message[] @relation("received")
  posts            Post[]
  comments         Comment[]
  likes            Like[]
}

model Message {
  id         String   @id @default(uuid())
  text       String
  senderId   String
  sender     User     @relation("sent", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("received", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  seen       Boolean  @default(false)
  imageUrl   String?
  imageId    String?
  imageLocal String?
}

model Post {
  id       String     @id @default(uuid())
  text     String?
  authorId String
  author   User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  links    PostLink[]
  comments Comment[]
  likes    Like[]
}

model Comment {
  id          String @id @default(uuid())
  text        String
  postId      String
  post        Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  commenterId String
  commmenter  User   @relation(fields: [commenterId], references: [id], onDelete: Cascade)
}

model Like {
  id      String @id @default(uuid())
  text    String
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  likerId String
  liker   User   @relation(fields: [likerId], references: [id], onDelete: Cascade)
}

model PostLink {
  id         String  @id @default(uuid())
  imageUrl   String?
  imageId    String?
  imageLocal String
  postId     String
  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum Farmer {
  CROP
  BLACK_SOLDIER
  FISH_POULTRY
  MANUAL
}
